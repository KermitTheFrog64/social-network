{"ast":null,"code":"var _jsxFileName = \"/home/natalie/ReactProjects/01/my-app/src/components/common/Paginator/Paginator.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styles from './Paginator.module.css';\nimport cn from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet Paginator = _ref => {\n  _s();\n\n  let {\n    totalItemsCount,\n    pageSize,\n    currentPage,\n    onPageChanged,\n    portionSize = 10\n  } = _ref;\n  let pagesCount = Math.ceil(totalItemsCount / pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  let portionCount = Math.ceil(pagesCount / portionSize);\n  let [portionNumber, setPortionNumber] = useState(1);\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n  let rightPortionPageNumber = portionNumber * portionSize;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.paginator,\n    children: [portionNumber > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setPortionNumber(portionNumber - 1);\n      },\n      children: \"PREV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }, this), pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map(p => {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        //className={currentPage === p && styles.selectedPage}\n        className: cn({\n          [styles.selectedPage]: currentPage === p\n        }, styles.pageNumber),\n        onClick: e => {\n          onPageChanged(p);\n        },\n        children: p\n      }, p, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 24\n      }, this);\n    }), portionCount > portionNumber && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setPortionNumber(portionNumber + 1);\n      },\n      children: \"NEXT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Paginator, \"8p8zb1vvZvsuWyQQS16DuuzsJLU=\");\n\n_c = Paginator;\nexport default Paginator;\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginator\");","map":{"version":3,"names":["React","useState","styles","cn","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","filter","p","map","selectedPage","pageNumber","e"],"sources":["/home/natalie/ReactProjects/01/my-app/src/components/common/Paginator/Paginator.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport styles from './Paginator.module.css';\nimport cn from \"classnames\"\n\nlet Paginator = ({ totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10 }) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\n\n    let pages = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n    let leftPortionPageNumber = (portionNumber -1) * portionSize + 1;\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n    return (\n        <div className={styles.paginator}>\n\n            {portionNumber > 1 &&\n                <button onClick={() => { setPortionNumber(portionNumber - 1) }} >PREV</button>}\n\n            {pages\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n            .map(p => {\n                return <span\n                    //className={currentPage === p && styles.selectedPage}\n                    className={cn({ [styles.selectedPage] : currentPage === p}, styles.pageNumber)}\n                    key={p}\n                    onClick={(e) => { onPageChanged(p) }}\n                >{p}</span>\n            })}\n\n            {portionCount > portionNumber &&\n                <button onClick={() => { setPortionNumber(portionNumber + 1) }} >NEXT</button>}\n\n        </div>\n    )\n}\n\nexport default Paginator;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,EAAP,MAAe,YAAf;;;AAEA,IAAIC,SAAS,GAAG,QAAiF;EAAA;;EAAA,IAAhF;IAAEC,eAAF;IAAmBC,QAAnB;IAA6BC,WAA7B;IAA0CC,aAA1C;IAAyDC,WAAW,GAAG;EAAvE,CAAgF;EAE7F,IAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUP,eAAe,GAAGC,QAA5B,CAAjB;EAEA,IAAIO,KAAK,GAAG,EAAZ;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,UAArB,EAAiCI,CAAC,EAAlC,EAAsC;IAClCD,KAAK,CAACE,IAAN,CAAWD,CAAX;EACH;;EAED,IAAIE,YAAY,GAAGL,IAAI,CAACC,IAAL,CAAUF,UAAU,GAAGD,WAAvB,CAAnB;EACA,IAAI,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,CAAD,CAAhD;EACA,IAAIkB,qBAAqB,GAAG,CAACF,aAAa,GAAE,CAAhB,IAAqBR,WAArB,GAAmC,CAA/D;EACA,IAAIW,sBAAsB,GAAGH,aAAa,GAAGR,WAA7C;EAEA,oBACI;IAAK,SAAS,EAAEP,MAAM,CAACmB,SAAvB;IAAA,WAEKJ,aAAa,GAAG,CAAhB,iBACG;MAAQ,OAAO,EAAE,MAAM;QAAEC,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;MAAqC,CAA9D;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHR,EAKKJ,KAAK,CACLS,MADA,CACOC,CAAC,IAAIA,CAAC,IAAIJ,qBAAL,IAA8BI,CAAC,IAAIH,sBAD/C,EAEAI,GAFA,CAEID,CAAC,IAAI;MACN,oBAAO;QACH;QACA,SAAS,EAAEpB,EAAE,CAAC;UAAE,CAACD,MAAM,CAACuB,YAAR,GAAwBlB,WAAW,KAAKgB;QAA1C,CAAD,EAA+CrB,MAAM,CAACwB,UAAtD,CAFV;QAIH,OAAO,EAAGC,CAAD,IAAO;UAAEnB,aAAa,CAACe,CAAD,CAAb;QAAkB,CAJjC;QAAA,UAKLA;MALK,GAGEA,CAHF;QAAA;QAAA;QAAA;MAAA,QAAP;IAMH,CATA,CALL,EAgBKP,YAAY,GAAGC,aAAf,iBACG;MAAQ,OAAO,EAAE,MAAM;QAAEC,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;MAAqC,CAA9D;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAjBR;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAsBH,CApCD;;GAAIb,S;;KAAAA,S;AAsCJ,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}